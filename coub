#!/usr/bin/env python3
import re
import sqlite3
import argparse
from sqlite3 import Error
from random import randint

import db
from settings import DB_LOCATION


def create_db():

  try:
    conn = sqlite3.connect(DB_LOCATION)
    print(sqlite3.version)
  except Error as e:
    print(e)
  finally:
    conn.close()


def is_coub(url):
  regex = re.compile("^(?:http|ftp)s?:\/\/coub.com\/view\/[\d\w]+", re.IGNORECASE)
  return re.match(regex, url)


def add_coub(args):

  if args.url is None:
    print("ERROR: URL can't be empty.")
    exit(1)

  if not is_coub(args.url):
    print("ERROR: URL is not coub.")
    exit(2)

  db.add_coub(args.url)


def get_random_coub():
  library_size = db.get_library_size()
  max_views = db.get_max_coub_views()
  min_views = db.get_min_coub_views()
  total_views = db.get_total_coub_views()

  if max_views != min_views:

    while True:

      random_coub_id = randint(1, library_size)
      random_coub = db.get_coub(random_coub_id)

      choise = (max_views - random_coub.views)/ total_views

      # choise = round(choise, 2)

      limit = 1 / library_size

      print("choise: {0} > limit: {1} random: {2} | total: {3} min: {4} max: {5}".format(choise, limit,
                                random_coub_id, total_views, min_views, max_views))

      if choise >= limit:
        random_coub.increase_view()
        db.update_coub(random_coub)
        print("Choosed Coub (id: {0})".format(random_coub_id))
        print()
        break;

  else:
    random_coub_id = randint(1, library_size)
    random_coub = db.get_coub(random_coub_id)

    random_coub.increase_view()
    db.update_coub(random_coub)

    print("Initialized Coub (id: {0})".format(random_coub_id))
    print()


def publish(args):
  print("Publish!")

  db.reset_statistic()

  for n in range(0,100):
    print("Iteration: {}".format(n))
    get_random_coub()


def show_statistic(args):
  size = db.get_library_size()
  new_coubs = db.get_new_coubs_size()

  print("Library size: {}".format(size))
  print("New coubs: {}".format(new_coubs))


def parse_args():
  DESCRIPTION = "Friday's Coub"

  parser = argparse.ArgumentParser(description=DESCRIPTION)
  subparsers = parser.add_subparsers()

  parser_add = subparsers.add_parser('add', help='Add a new coub to library')
  parser_add.add_argument('url', help='Coub URL.')
  parser_add.set_defaults(func=add_coub)

  parser_publish = subparsers.add_parser('publish', help='Publish coub to slack community')
  parser_publish.set_defaults(func=publish)

  parser_statistic = subparsers.add_parser('statistic', help='Show library statistic.')
  parser_statistic.set_defaults(func=show_statistic)

  return parser.parse_args()


def main():
  args = parse_args()
  args.func(args)


if __name__ == '__main__':
  main()


